generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id             String @id @default(uuid())
  siteName       String
  siteDescription String
  contactEmail   String
  contactPhone   String
  address        String
  whatsappNumber String
}

model ServiceCategory {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  description String?
  imageUrl  String?
  services  Service[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id          String @id @default(uuid())
  name        String @unique
  description String
  image       String
  slug        String @unique
  serviceCategoryId String
  category    ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  price       Float
  image       String
  slug        String  @unique
  categoryId  String
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  OrderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductCategory {
  id        String    @id @default(uuid())
  name      String    @unique
  slug      String    @unique
  description String?
  imageUrl  String?
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id             String   @id @default(uuid())
  customerName   String
  customerEmail  String
  customerPhone  String
  customerAddress String
  totalAmount    Float
  items          Json     // Store cart items as JSON
  status         String   @default("PENDING") // PENDING, COMPLETED, CANCELLED
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PageContent {
  id        String   @id @default(uuid())
  pageName  String   @unique // e.g., "about-us", "contact", "blog"
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
